{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  createBasicAuthHeader(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  verifyAuthentication(username, password) {\n    let basicAuthHeader = this.createBasicAuthHeader(username, password);\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: basicAuthHeader\n      }\n    });\n  }\n\n  verifyJWTAuthentication(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLogin(username, password) {\n    console.log(\"success\");\n    let basicAuthHeader = this.createBasicAuthHeader(username, password);\n    sessionStorage.setItem('authUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  registerSuccessfulJWTLogin(username, token) {\n    sessionStorage.setItem('authUser', username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  logout() {\n    sessionStorage.removeItem('authUser');\n  }\n\n  userLoggedIn() {\n    let user = sessionStorage.getItem('authUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getUsername() {\n    let user = sessionStorage.getItem('authUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.userLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/joseph/Desktop/gotrust/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","createBasicAuthHeader","username","password","window","btoa","createJWTToken","token","verifyAuthentication","basicAuthHeader","get","headers","authorization","verifyJWTAuthentication","post","registerSuccessfulLogin","console","log","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulJWTLogin","logout","removeItem","userLoggedIn","user","getItem","getUsername","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDG,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,oBAAoB,CAACN,QAAD,EAAWC,QAAX,EAAqB;AACrC,QAAIM,eAAe,GAAG,KAAKR,qBAAL,CAA2BC,QAA3B,EAAqCC,QAArC,CAAtB;AACA,WAAOJ,KAAK,CAACW,GAAN,CAAU,iCAAV,EACP;AACIC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEH;AAAhB;AADb,KADO,CAAP;AAKH;;AAEDI,EAAAA,uBAAuB,CAACX,QAAD,EAAWC,QAAX,EAAqB;AACxC,WAAOJ,KAAK,CAACe,IAAN,CAAW,oCAAX,EACP;AACIZ,MAAAA,QADJ;AAEIC,MAAAA;AAFJ,KADO,CAAP;AAMH;;AAEDY,EAAAA,uBAAuB,CAACb,QAAD,EAAWC,QAAX,EAAqB;AACxCa,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAIR,eAAe,GAAG,KAAKR,qBAAL,CAA2BC,QAA3B,EAAqCC,QAArC,CAAtB;AACAe,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCjB,QAAnC;AACA,SAAKkB,sBAAL,CAA4BX,eAA5B;AACH;;AAEDY,EAAAA,0BAA0B,CAACnB,QAAD,EAAWK,KAAX,EAAkB;AACxCW,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCjB,QAAnC;AACA,SAAKkB,sBAAL,CAA4B,KAAKd,cAAL,CAAoBC,KAApB,CAA5B;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,UAA1B;AACH;;AAEDC,EAAAA,YAAY,GAAG;AACX,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,UAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,WAAW,GAAG;AACV,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,UAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACX,eAAD,EAAkB;AACpCV,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,YAAL,EAAH,EAAwB;AACpBO,QAAAA,MAAM,CAACpB,OAAP,CAAeC,aAAf,GAA+BH,eAA/B;AACH;;AACD,aAAOsB,MAAP;AACH,KANL;AAQH;;AAjEuB;;AAoE5B,eAAe,IAAI/B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'; \r\nclass AuthenticationService {\r\n\r\n    createBasicAuthHeader(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password);\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token;\r\n    }\r\n\r\n    verifyAuthentication(username, password) {\r\n        let basicAuthHeader = this.createBasicAuthHeader(username, password);\r\n        return axios.get('http://localhost:8080/basicauth', \r\n        {\r\n            headers: {authorization: basicAuthHeader}\r\n        }\r\n        );\r\n    }\r\n\r\n    verifyJWTAuthentication(username, password) {\r\n        return axios.post('http://localhost:8080/authenticate', \r\n        {\r\n            username,\r\n            password\r\n        }\r\n        );\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        console.log(\"success\");\r\n        let basicAuthHeader = this.createBasicAuthHeader(username, password);\r\n        sessionStorage.setItem('authUser', username);\r\n        this.setupAxiosInterceptors(basicAuthHeader);\r\n    }\r\n\r\n    registerSuccessfulJWTLogin(username, token) {\r\n        sessionStorage.setItem('authUser', username);\r\n        this.setupAxiosInterceptors(this.createJWTToken(token));\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authUser');\r\n    }\r\n\r\n    userLoggedIn() {\r\n        let user = sessionStorage.getItem('authUser');\r\n        if (user === null) return false;\r\n        return true;\r\n    }\r\n\r\n    getUsername() {\r\n        let user = sessionStorage.getItem('authUser');\r\n        if (user === null) return '';\r\n        return user;\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.userLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader;\r\n                }\r\n                return config;\r\n            } \r\n        );\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}