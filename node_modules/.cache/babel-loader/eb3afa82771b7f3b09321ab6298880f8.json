{"ast":null,"code":"var _jsxFileName = \"/home/joseph/Desktop/gotrust/todo-app/src/components/todo/Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoService from '../../api/todo/TodoService.js';\nimport AuthenticationService from './AuthenticationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todo(props) {\n  _s();\n\n  let id = props.match.params.id;\n  let name = AuthenticationService.getUsername();\n  const [desc, setDesc] = useState('');\n  const [date, setDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n  const history = useHistory();\n  useEffect(() => {\n    if (id == -1) {\n      return;\n    }\n\n    TodoService.retrieveTodo(name, id).then(response => {\n      setDesc(response.data.description);\n      setDate(moment(response.data.targetDate).format('YYYY-MM-DD'));\n      console.log(\"set\");\n    });\n  });\n\n  function submit(values) {\n    if (id === -1) {\n      let name = AuthenticationService.getUsername();\n      TodoService.createTodo(name, values.id, {\n        id: values.id,\n        description: values.desc,\n        targetDate: values.date\n      }).then(() => {\n        history.push(`/todos`);\n      });\n    } else {\n      let name = AuthenticationService.getUsername();\n      TodoService.updateTodo(name, values.id, {\n        id: values.id,\n        description: values.desc,\n        targetDate: values.date\n      }).then(() => {\n        history.push(`/todos`);\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Todo \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          desc,\n          date,\n          id\n        },\n        onSubmit: submit,\n        validate: validate,\n        validateOnChange: false,\n        validateOnBlur: false,\n        enableReinitialize: true,\n        children: props => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"desc\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"date\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"text\",\n              name: \"desc\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" Target Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"date\",\n              name: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"submit\",\n            children: \" Save \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Todo, \"ZVs5a+XHnxb7X3B6k+V6lnQNOPU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Todo;\n\nfunction validate(values) {\n  let errors = {};\n\n  if (!values.desc) {\n    errors.desc = 'Enter a description';\n  }\n\n  if (!moment(values.date).isValid()) {\n    errors.date = \"Enter a valid target date\";\n  }\n\n  return errors;\n}\n\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/home/joseph/Desktop/gotrust/todo-app/src/components/todo/Todo.jsx"],"names":["React","useState","useEffect","useHistory","moment","Formik","Form","Field","ErrorMessage","TodoService","AuthenticationService","Todo","props","id","match","params","name","getUsername","desc","setDesc","date","setDate","Date","format","history","retrieveTodo","then","response","data","description","targetDate","console","log","submit","values","createTodo","push","updateTodo","validate","errors","isValid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoService from '../../api/todo/TodoService.js';\nimport AuthenticationService from './AuthenticationService';\n\n\nfunction Todo(props) {\n    let id = props.match.params.id;\n    let name = AuthenticationService.getUsername();\n\n    const [desc, setDesc] = useState('');\n    const [date, setDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n    const history = useHistory();\n\n    useEffect(() => {\n        if (id == -1) {\n            return;\n        }\n        TodoService.retrieveTodo(name, id).then(\n            response => {\n                setDesc(response.data.description);\n                setDate(moment(response.data.targetDate).format('YYYY-MM-DD'));\n                console.log(\"set\");\n            }\n        )\n    })\n\n    function submit(values) {\n        if (id === -1) {\n            let name = AuthenticationService.getUsername();\n            TodoService.createTodo(name, values.id, {\n                id: values.id,\n                description: values.desc,\n                targetDate: values.date\n            }).then(\n\n                () => {\n                    history.push(`/todos`)\n                }\n            )\n        }\n        else {\n            let name = AuthenticationService.getUsername();\n            TodoService.updateTodo(name, values.id, {\n                id: values.id,\n                description: values.desc,\n                targetDate: values.date\n            }).then(\n\n                () => {\n                    history.push(`/todos`)\n                }\n            )\n        }\n    }\n    return (\n        <div>\n            <h1> Todo </h1>\n            <div className=\"container\">\n                <Formik initialValues={{ desc, date, id }} onSubmit={submit} validate={validate} validateOnChange={false} validateOnBlur={false} enableReinitialize={true}>\n                    {\n                        (props) =>\n                            (\n                                <Form>\n                                    <ErrorMessage name=\"desc\" component=\"div\" className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"alert alert-warning\" />\n\n                                    <fieldset className=\"form-group\">\n                                        <label> Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"desc\" />\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label> Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"date\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\"> Save </button>\n                                </Form>\n                            )\n                    }\n                </Formik>\n            </div>\n        </div>\n    );\n}\n\n\n\nfunction validate(values) {\n    let errors = {};\n    if (!values.desc) {\n        errors.desc = 'Enter a description'\n    }\n\n    if (!moment(values.date).isValid()) {\n        errors.date = \"Enter a valid target date\"\n    }\n    return errors;\n}\n\nexport default Todo;"]},"metadata":{},"sourceType":"module"}